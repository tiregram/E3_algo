=== Exercice 4 ===


1- Implantez une structure de tas, quil faut impérativement limplanter avec un tableau. 
    faites une classe avec deux méthodes de base: downheap et upheap, et également le swap rapide entre deux éléments du tableau.

Pour rajouter un élément dans le tas on ajoute à la fin du tableau et on fait upheap
Pour enlever un élément on échange le dernier avec le premier, on sort le dernier (qui était le premier) et on fait downheap.

ensuite il faut deux méthodes publiques:

	insert() # insérer un élément dans le tas
 	delete() # sortir la racine du tas.

ensuite avec ces deux opérations, implémentez le tri heapsort, qui est très simple: Etant donné un tableau déléments non triés, tout insérer dans le tas, puis tout enlever. Les  éléments apparaissent triés.

Voir http://en.wikipedia.org/wiki/Binary_heap

2- Implantez bubble sort (vu en cours). Comparer heapsort et bubble sort pour des tableaux de taille croissante entre 10 et 10^5 éléments. 
    Faire un plot log-log comparant les deux méthodes.

=== Exercice 5 ===

1- terminer heapsort sur un tableau, sans utiliser de stockage supplémentaire. Cest assez simple, il faut séparer le tableau initial en deux parties: la partie utilisé par le tas et par le reste du tableau, aussi bien au moment de la création du tas que de sa destruction. Quand on construit le tas on lit le tableau de longueur n+1, de gauche à droite. A lindice i on construit le tas dans la partie de 0 à i-1, avec le reste du tableau entre i et n. Pour la deuxième phase, celle de tri, dans lalgorithme du tas on échange la racine (le plus grand élément) avec la fin du tas, puis on réduit le tas et on fait les permutations pour continuer à garantir la condition de tas. Cette façon de faire place naturellement lélément le plus grand du tas à lendroit du tableau quil faut pour quil soit trié (a la fin pour le plus grand element, puis juste avant pour le 2e plus grand, etc).

Cest très important quand on utilise beaucoup de mémoire. Cest très joli à faire, les deux parties du tri (mise dans le tas et extraction) snot assez élégantes.

Une autre façon de faire encore plus efficace consiste à prendre les valeurs initiales, non-triées du tableau et faire uniquement les permutations nécessaires pour que la condition de tas soit respectée, en place, dans le tableau. Il suffit de le faire des feuilles vers la racine et cest très rapide.  Ensuite on extrait les valeurs du tas comme précédemment. 

Comparez le temps de calcul des différentes versions de heapsort.

2- Implantez mergesort, le tri par fusion:

http://fr.wikipedia.org/wiki/Tri_fusion

http://en.wikipedia.org/wiki/Merge_sort (Il y a de nombreux exemples dimplementation dans cette page, mais le cas de la liste est celui de lanimation, quils appellent top-down par liste)


a- Le tri est simple à comprendre, voir lanimation de la page en anglais. Il peut simplémenter sur des tableaux avec un buffer supplémentaire, ou bien sur une liste, où il est optimal. Cest une occasion parfaite pour parler de récursion, car le tri est naturellement décrit récursivement.

b- Fais-leur reprendre la structure de liste (double-ended queue) quils ont implémenté au premier TP, cest une super occasion de le faire.

c- Ensuite fais leur comparer le mergesort et le heapsort pour une liste en terme de temps de calcul et de stockage nécessaire. Ils doivent voir que le cas de heapsort demande le stockage du tas, qui est cette fois-ci séparé de la liste.

d- Sil y a du temps, quil mettent en oeuvre mergesort sur un tableau (avec copie).